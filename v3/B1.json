[
  {
    "id": 1,
    "image": "https://ordinarycoders.com/_next/image?url=https%3A%2F%2Fd2gdtie5ivbdow.cloudfront.net%2Fmedia%2Fimages%2Farticle_images%2FJaysha%2Funcontrolled_vs_controlled_components.png&w=1920&q=75",
    "topic": "Tell us the differences between uncontrolled and controlled components.",
    "details": "In React, there are two main types of components: uncontrolled and controlled components. Uncontrolled components are those that manage their own state internally, while controlled components rely on their parent components to manage their state. In this article, we'll explore the differences between these two types of components and when to use each one.",
    "published_date": "2022-04-01",
    "authorName": "John Smith"
  }, 
  {
    "id": "2",
    "image": "https://miro.medium.com/v2/resize:fit:800/1*SrVBtu5yleecoYi4exf4rw.jpeg",
    "topic": "How to validate React props using PropTypes",
    "details": "In this tutorial, we'll go over how to use PropTypes to validate the props of your React components. PropTypes is a great tool for catching errors early in the development process, and can help make your code more robust and maintainable.",
    "published_date": "2022-04-15",
    "authorName": "John Doe"
  },
  {
    "id": 3,
    "image": "https://graffersid.com/wp-content/uploads/2022/09/Express-JS-vs-Node-JS.png",
    "topic": "Tell us the difference between Node.js and Express.js",
    "details": "Node.js is a runtime environment for executing JavaScript code outside of a browser, while Express.js is a web application framework built on top of Node.js. Express.js provides a set of features and tools that make it easier to build web applications with Node.js, such as routing, middleware, and templating. In contrast, Node.js provides the core functionality for running JavaScript code on the server and interacting with the file system, network, and other system resources.",
    "published_date": "2023-05-01",
    "authorName": "John Doe"
  },
  {
    "id": 4,
    "image": "https://blog.alexdevero.com/wp-content/uploads/2021/06/14-06-21-how-to-create-your-own-react-custom-hooks-blog.jpg",
    "topic": "What is a custom hook, and why will you create a custom hook?",
    "details": "Custom hooks are a way to extract reusable logic from components. By creating a custom hook, you can abstract away complex logic and make it easier to reuse across your application. In this blog post, we'll explore what custom hooks are, how they work, and why you might want to create one for your project.",
    "published_date": "2022-02-14",
    "authorName": "Jane Doe"
  }
]
